{"version":3,"sources":["config/tableName.ts","APP2.tsx","serviceWorker.js","index.tsx"],"names":["industryNameList","APP2","props","margin","height","width","originalData","rectWidth","rectIntervalWidth","svgGSelect","yAxisGSelect","xAxisGSelect","rectContainerGSelect","yScale","xScale","initDraw","d3","attr","l","r","t","b","append","setColor","handleMouseOut","setState","state","isAlertShow","handleMouseOver","d","i","self","alertText","style","listStyle","padding","data","typeObjList","map","typeObj","key","name","draw","stackedData","yAxisMax","dataLength","industryShowList","length","mapIndexToIndustry","el","domain","range","xAxis","transition","call","selectAll","drawXAxis","yAxis","drawYAxis","computeXByIndex","findColorByTypeName","typeIndex","findIndex","type","dataUpdate","allRectUpdate","enter","on","exit","remove","drawRect","colormaker","tempTypeShow","color","handleDataUsed","dataUsed","forEach","industryIndex","tempObj","push","sortedBy","sortedTypeName","sort","a","typeCopy","splice","unshift","computeTypeObjSum","typeObjForSum","sum","Number","sortData","keys","singleIndustryObj","values","handleInformationChange","typeName","handleIndustryChange","value","indexOf","index","industry","tempArr","handleSortedByChange","informationShow","process","alert","initData","then","notificationStyle","left","top","zIndex","position","backgroundColor","display","this","boxShadow","borderRadius","fontSize","className","marginRight","id","checked","onChange","htmlFor","String","e","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11d0cd93.chunk.js","sourcesContent":["\r\nexport const industryNameList:string[] = [\r\n    '工業',\r\n    '礦業及土石採取業',\r\n    '製造業',\r\n    '電力及燃氣供應業',\r\n    '用水供應及污染整治業',\r\n    '營建工程業',\r\n    '服務業',\r\n    '批發及零售業',\r\n    '運輸及倉儲業',\r\n    '住宿及餐飲業',\r\n    '出版﹑影音製作﹑傳播及資通訊服務業',\r\n    '金融及保險業',\r\n    '不動產業',\r\n    '專業﹑科學及技術服務業',\r\n    '支援服務業',\r\n    '教育業(不含各級公私立學校等)',\r\n    '醫療保健業',\r\n    '藝術﹑娛樂及休閒服務業',\r\n    '其他服務業'\r\n]\r\nexport const typeNameList:string[] = [\r\n    '每人每月總薪資(新臺幣元)',\r\n    '每人每月經常性薪資(新臺幣元)',\r\n    '每人每月非經常性薪資(新臺幣元)',\r\n    '每人每月加班費(新臺幣元)',\r\n    '受僱員工人數(人)',\r\n    '進入率(%)',\r\n    '退出率(%)',\r\n    '總工時(小時)',\r\n    '正常工時(小時)',\r\n    '加班工時(小時)'\r\n]\r\nexport const yearName:string[] = [\r\n    '102年',\r\n    '103年',\r\n    '104年',\r\n    '105年',\r\n    '106年',\r\n    '107年',\r\n]\r\nexport const information = ['薪資', '就業流動', '工時']","import React, { Component } from 'react'\r\nimport * as d3 from 'd3'\r\nimport { industryNameList, typeNameList } from './config/tableName'\r\nimport { element } from 'prop-types'\r\nimport { type } from 'os'\r\ninterface IType {\r\n    name: string, color: string\r\n}\r\ninterface IState {\r\n    typeObjList: IType[],\r\n    industryShowList: string[],\r\n    informationShow: string,\r\n    sortedBy: string,\r\n    isAlertShow: boolean,\r\n    alertText: JSX.Element\r\n}\r\ninterface strKeyObj {\r\n    [key: string]: any\r\n}\r\nexport default class APP2 extends Component<any, IState> {\r\n    //top,bottom,left,right\r\n    margin: { t: number, b: number, l: number, r: number }\r\n    height: number\r\n    width: number\r\n    originalData: any\r\n    rectWidth: number\r\n    rectIntervalWidth: number\r\n    svgGSelect!: d3.Selection<SVGGElement, unknown, HTMLElement, any>\r\n    yAxisGSelect!: d3.Selection<SVGGElement, unknown, HTMLElement, any>\r\n    xAxisGSelect!: d3.Selection<SVGGElement, unknown, HTMLElement, any>\r\n    rectContainerGSelect!: d3.Selection<SVGGElement, unknown, HTMLElement, any>\r\n    yScale!: d3.ScaleLinear<number, number>\r\n    xScale!: d3.ScaleBand<string>\r\n    constructor(props: any) {\r\n        super(props)\r\n        this.rectWidth = 20\r\n        this.rectIntervalWidth = 10\r\n        this.margin = {\r\n            //top,bottom,left,right\r\n            t: 50,\r\n            b: 150,\r\n            l: 100,\r\n            r: 50\r\n        }\r\n        this.height = 500\r\n        this.width = 500\r\n        this.originalData = [] //cleaned data\r\n        this.state = {\r\n            typeObjList: [\r\n                { name: '每人每月經常性薪資(新臺幣元)', color: '' },\r\n                { name: '每人每月非經常性薪資(新臺幣元)', color: '' }],// the string is the value of typeName\r\n            industryShowList: ['0'],\r\n            informationShow: 'salary',\r\n            sortedBy: '',\r\n            isAlertShow: false,\r\n            alertText: <span></span>\r\n        }\r\n    }\r\n    initDraw = (): void => {\r\n        this.svgGSelect = d3\r\n            .select('#svgSection')\r\n            .attr('width', this.width + this.margin.l + this.margin.r)\r\n            .attr('height', this.height + this.margin.t + this.margin.b)\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(${this.margin.l}, ${this.margin.t})`);\r\n        this.xAxisGSelect = this.svgGSelect.append(\"g\")\r\n            .attr(\"class\", \"x_container\")\r\n            .attr(\"transform\", `translate(0,${this.height})`)\r\n        this.yAxisGSelect = this.svgGSelect.append(\"g\")\r\n            .attr(\"class\", \"y_container\")\r\n        this.rectContainerGSelect = this.svgGSelect.append('g')\r\n            .attr(\"class\", \"rect_container\")\r\n        this.setColor()\r\n    }\r\n    handleMouseOut = () => {\r\n        this.setState({ ...this.state, isAlertShow: false })\r\n    }\r\n    handleMouseOver = (d: any, i: number) => {\r\n        const self = this\r\n        const setText = () => {\r\n            return (<ul style={{\r\n                listStyle: 'none',\r\n                margin: 0,\r\n                padding: 10\r\n            }}>\r\n                <li>{d.data['產業']}</li>\r\n                {\r\n                    self.state.typeObjList.map((typeObj) =>\r\n                        <li key={typeObj.name}>{typeObj.name}:{d.data[typeObj.name]}</li>\r\n                    )\r\n                }\r\n            </ul>)\r\n        }\r\n        this.setState({ ...this.state, alertText: setText(), isAlertShow: true })\r\n    }\r\n    draw = (stackedData: d3.Series<{ [key: string]: number; }, string>[], yAxisMax: number): void => {\r\n        const self: this = this\r\n        const dataLength: number = self.state.industryShowList.length\r\n        const drawXAxis = (): void => {\r\n            const mapIndexToIndustry: string[] = stackedData[0].map((el: any) => el['data']['產業'])\r\n            self.xScale = d3.scaleBand().domain(mapIndexToIndustry).range([0, self.width])\r\n            const xAxis = d3.axisBottom(self.xScale)\r\n            self.xAxisGSelect\r\n                .transition()\r\n                .call(xAxis)\r\n            self.xAxisGSelect.selectAll('text')\r\n                .style(\"text-anchor\", \"end\")\r\n                .style(\"font-size\", \"12px\")\r\n                .style(\"font-weight\", \"900\")\r\n                .attr(\"transform\", () => \"rotate(-25)\");\r\n        }\r\n        const drawYAxis = (): void => {\r\n            self.yScale = d3.scaleLinear().domain([0, yAxisMax]).range([this.height, 0])\r\n            const yAxis = d3.axisLeft(self.yScale)\r\n            self.yAxisGSelect.transition().call(yAxis);\r\n        }\r\n        const drawRect = (): void => {\r\n            const computeXByIndex = (i: number): number => {\r\n                return (((i * 2 + 1) * self.width) / (dataLength * 2)) - (self.rectWidth / 2)\r\n            }\r\n            //make data to a 2D array\r\n            //[\r\n            //  [x0y0,x1y0,x2y0],\r\n            //  [x0y1,x1y1,x2y1]  \r\n            //]\r\n            const findColorByTypeName = (key: string): string => {\r\n                const typeIndex = self.state.typeObjList.findIndex(type => type.name === key)\r\n                return self.state.typeObjList[typeIndex]['color']\r\n            }\r\n            const dataUpdate = self.rectContainerGSelect.selectAll('g').data(stackedData)\r\n            const dataEnter = dataUpdate.enter()\r\n                .append('g')\r\n                .attr('fill', d => findColorByTypeName(d.key))\r\n                .selectAll('rect')\r\n                .data(d => d)\r\n                .enter()\r\n                .append('rect')\r\n                .on(\"mouseover\", (d, i) => self.handleMouseOver(d, i))\r\n                .on(\"mouseout\", () => self.handleMouseOut())\r\n                .transition()\r\n                .attr(\"width\", self.rectWidth)\r\n                .attr(\"x\", (d, i) => computeXByIndex(i))\r\n                .attr(\"y\", d => self.yScale(d[1]))\r\n                .attr(\"height\", d => self.yScale(d[0]) - self.yScale(d[1]))\r\n            const allRectUpdate = dataUpdate\r\n                .attr('fill', d => findColorByTypeName(d.key))\r\n                .selectAll('rect')//  [x0y0,x1y0,x2y0]\r\n                .data(d => d)\r\n            allRectUpdate\r\n                .transition()\r\n                .attr(\"x\", (d, i) => computeXByIndex(i))\r\n                .attr(\"y\", d => self.yScale(d[1]))\r\n                .attr(\"height\", d => self.yScale(d[0]) - self.yScale(d[1]))\r\n            const rectExit = allRectUpdate\r\n                .exit()\r\n                .remove()\r\n            const rectEnter = allRectUpdate\r\n                .enter()\r\n                .append('rect')\r\n                .on(\"mouseover\", (d, i) => self.handleMouseOver(d, i))\r\n                .on(\"mouseout\", () => self.handleMouseOut())\r\n                .transition()\r\n                .attr(\"width\", self.rectWidth)\r\n                .attr(\"x\", (d, i) => computeXByIndex(i))\r\n                .attr(\"y\", d => self.yScale(d[1]))\r\n                .attr(\"height\", d => self.yScale(d[0]) - self.yScale(d[1]))\r\n        }\r\n        drawXAxis()\r\n        drawYAxis()\r\n        drawRect()\r\n    }\r\n    setColor = () => {\r\n        const colormaker = d3.scaleOrdinal(d3.schemeCategory10);\r\n        let tempTypeShow = this.state.typeObjList.map((type) => {\r\n            return {\r\n                ...type, color: colormaker(type.name)\r\n            }\r\n        })\r\n        this.setState({ ...this.state, typeObjList: tempTypeShow })\r\n    }\r\n    handleDataUsed = (): void => {\r\n        const self = this\r\n        let dataUsed: strKeyObj[] = []\r\n        let typeObjList = [...this.state.typeObjList]\r\n        const setDataUsed = () => {\r\n            //make dataUsed to\r\n            //{產業:xxx,typeName:yyy}\r\n            self.state.industryShowList.forEach(industryIndex => {\r\n                let tempObj: strKeyObj = {}\r\n                tempObj['產業'] = (industryNameList as strKeyObj)[industryIndex]\r\n                self.state.typeObjList.forEach((typeObj: IType) => {\r\n                    tempObj[typeObj.name] = self.originalData[industryIndex][typeObj.name]\r\n                })\r\n                dataUsed.push(tempObj)\r\n            });\r\n        }\r\n        const sortData = () => {\r\n            const sortedTypeName = self.state.sortedBy\r\n            if (sortedTypeName !== 'sum') {\r\n                dataUsed.sort((a, b) => {\r\n                    return a[sortedTypeName] - b[sortedTypeName]\r\n                })\r\n                const typeIndex = typeObjList.findIndex(typeObj => typeObj.name === sortedTypeName)\r\n                const typeCopy = { ...typeObjList[typeIndex] }\r\n                if (typeIndex !== 0) {\r\n                    typeObjList.splice(typeIndex, 1)\r\n                    typeObjList.unshift(typeCopy)\r\n                }\r\n            } else {\r\n                dataUsed.sort((a, b): number => {\r\n                    const computeTypeObjSum = (typeObjForSum: strKeyObj): number => {\r\n                        let sum = 0\r\n                        self.state.typeObjList.forEach((typeObj: IType) => {\r\n                            sum += Number(typeObjForSum[typeObj.name])\r\n                        })\r\n                        return sum\r\n                    }\r\n                    return computeTypeObjSum(a) - computeTypeObjSum(b)\r\n                })\r\n            }\r\n        }\r\n        const computeMaxValueSumInDataUsed = (): number => {\r\n            //d3.map(singleIndustryObj).values() which means \r\n            //get a array of all value in singleIndustryObj\r\n            //then get the sum of the array\r\n            //means each industry has one number in a array\r\n            //the number is the sum of all key in industry\r\n            //final find the max of all array\r\n            //let the max-value be the max-value of yAxis\r\n            if (self.state.industryShowList.length > 0) {\r\n                return (d3.max(dataUsed.map((singleIndustryObj) => {\r\n                    return d3.sum(d3.map(singleIndustryObj).values())\r\n                }\r\n                )) as number)\r\n            }\r\n            else {\r\n                return 50000\r\n            }\r\n        }\r\n        const stackedData = () => {\r\n            return d3.stack()\r\n                .keys(typeObjList.map(typeObj => typeObj.name))\r\n                (dataUsed);\r\n        }\r\n        setDataUsed()\r\n        if (self.state.sortedBy !== '') {\r\n            sortData()\r\n        }\r\n        this.draw(stackedData(), computeMaxValueSumInDataUsed())\r\n    }\r\n    handleInformationChange = (typeName: string) => {\r\n        this.setState({ ...this.state, sortedBy: typeName }, () => this.handleDataUsed())\r\n    }\r\n    handleIndustryChange = (value: string): void => {\r\n        if (this.state.industryShowList.indexOf(value) !== -1) {\r\n            //if the checkbox is already checked, delete it.\r\n            const index = this.state.industryShowList.findIndex(industry => industry === value)\r\n            let tempArr: string[] = [...this.state.industryShowList]\r\n            tempArr.splice(index, 1)\r\n            this.setState({ ...this.state, industryShowList: [...tempArr] }, () => {\r\n                this.handleDataUsed()\r\n            })\r\n            return\r\n        }\r\n        this.setState({ ...this.state, industryShowList: [...this.state.industryShowList, value] }, () => {\r\n            this.handleDataUsed()\r\n        })\r\n    }\r\n    handleSortedByChange = (typeName: string) => {\r\n        this.setState({ ...this.state, sortedBy: typeName }, () => this.handleDataUsed())\r\n    }\r\n    componentDidMount() {\r\n        const initData = async (): Promise<void> => {\r\n            try {\r\n                this.originalData = await d3.csv(`${process.env.PUBLIC_URL}/data8.csv`)\r\n            } catch (err) {\r\n                alert('抓資料時發生錯誤，請重開')\r\n            }\r\n        }\r\n        initData().then(() => {\r\n            this.initDraw()\r\n            this.handleSortedByChange('')\r\n        })\r\n    }\r\n    render() {\r\n        const notificationStyle: React.CSSProperties = {\r\n            left: 150,\r\n            top: 50,\r\n            zIndex: 100000,\r\n            position: 'absolute',\r\n            backgroundColor: 'white',\r\n            display: this.state.isAlertShow ? 'block' : 'none',\r\n            boxShadow: '0 1px 2px rgba(0,0,0,0.5)',\r\n            borderRadius: 8,\r\n            fontSize: 8,\r\n            margin: 0,\r\n            padding: 0\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                <section>\r\n                    <span style={{ marginRight: 15 }}>108年</span>\r\n                    <span>\r\n                        {/*\r\n                        <span>資訊</span>\r\n                        <span style={{ marginRight: 10 }}>\r\n                            <input type=\"radio\"\r\n                                id=\"salary\"\r\n                                value='salary'\r\n                                onChange={e => this.handleInformationChange(e.target.value)}\r\n                                checked={this.state.informationShow === 'salary'} />\r\n                            <label htmlFor=\"salary\">薪水</label>\r\n                        </span>\r\n                        <span>\r\n                    <input type=\"radio\" id=\"flu\" name=\"information\" value='2' onChange={(e) => handleInformationChange(e)} />\r\n                    <label htmlFor=\"flu\">流動率</label>\r\n                  </span>\r\n                  <span>\r\n                    <input type=\"radio\" id=\"workTime\" name=\"information\" value='3' onChange={(e) => handleInformationChange(e)} />\r\n                    <label htmlFor=\"workTime\">工時</label>\r\n                  </span>*/}\r\n                    </span>\r\n                    <span>\r\n                        <span style={{ marginRight: 15 }}>排列</span>\r\n                        {this.state.typeObjList.map((typeObj: IType) =>\r\n                            <span key={typeObj.name} style={{ marginRight: 15 }}>\r\n                                <input type=\"radio\"\r\n                                    id={`sortedBy${typeObj.name}`}\r\n                                    checked={this.state.sortedBy === typeObj.name}\r\n                                    onChange={() => this.handleSortedByChange(typeObj.name)} />\r\n                                <label htmlFor={`sortedBy${typeObj.name}`}>{typeObj.name}</label>\r\n                            </span>)}\r\n                        <span style={{ marginRight: 15 }}>\r\n                            <input type=\"radio\"\r\n                                id=\"sortedBySum\"\r\n                                checked={this.state.sortedBy === \"sum\"}\r\n                                onChange={() => this.handleSortedByChange('sum')} />\r\n                            <label htmlFor=\"sortedBySum\">總和</label>\r\n                        </span>\r\n                        <span>\r\n                            <input type=\"radio\"\r\n                                id=\"sortedByNone\"\r\n                                checked={this.state.sortedBy === \"\"}\r\n                                onChange={() => this.handleSortedByChange('')} />\r\n                            <label htmlFor=\"sortedByNone\">無排列</label>\r\n                        </span>\r\n                    </span>\r\n\r\n                </section>\r\n                <section style={{ display: 'flex' }}>\r\n                    <aside >\r\n                        <div>產業</div>\r\n                        {industryNameList.map((industry, index) =>\r\n                            <div key={index}>\r\n                                <input type=\"checkbox\"\r\n                                    checked={this.state.industryShowList.indexOf(String(index)) !== -1}\r\n                                    value={index}\r\n                                    id={`industry${index}`}\r\n                                    onChange={e => this.handleIndustryChange(e.target.value)} />\r\n                                <label htmlFor={`industry${index}`}>{industry}</label>\r\n                            </div>\r\n                        )}\r\n                    </aside>\r\n                    <main style={{ position: 'relative' }}>\r\n                        <section style={notificationStyle}>\r\n                            {this.state.alertText}\r\n                        </section>\r\n                        <svg id=\"svgSection\"></svg>\r\n                    </main>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './APP2';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}